#!/usr/bin/env python
# coding: utf-8

# # Prison Population Exploratory Data Analysis and Visualization

# 
# ## Introduction

# In this Project I run some Exploratory Data Analysis on a couple of Data sets on the topic of prison populations in the United States. While the United States has only 5 percent of the world's population, it has nearly 25 percent of its prisoners — about 2.2 million people.[<sup>1</sup>](#fn1 "footnote and tooltip 1")  I wanted to do more research into trends of crime and how it compares to trends in the prisoner population.

# ### Packages and Libraries used

# In[1]:


get_ipython().run_line_magic('pylab', 'inline')
get_ipython().system('pip install plotly')
import pandas as pd
import re
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import numpy as np
import plotly.figure_factory as ff
import re


# ### Loading & cleaning the first data set

# I pulled my first dataset from Kaggle  that was originally from Uniform Crime Report (UCR) put out by the FBI

# In[2]:


#load data not inlcudnig the first row which was just filled with NAs
path = "/Users/k12/Downloads/archive/"
file2 = "crime_and_incarceration_by_state.csv"
K1 = pd.read_csv(path + file2)
K1 = K1.iloc[1:]
K1.head()


# In[45]:


#Rename the jurisdiction variable to be more manageable
K1.rename(columns={'jurisdiction':'State'}, inplace=True)
K1.head()


# In[46]:


K1.describe()
#Remove variables that aren't useful for analysis
del K1["rape_revised"]
del K1["rape_legacy"]
del K1["crime_reporting_change"]
del K1["crimes_estimated"]


# In[ ]:


#Remove Columns with NAs after checking to see how many NAs there were and which columns they were in. 
K1.dtypes
K1[K1.isnull().any(axis=1)]
K1 = K1[K1['state_population'].notna()]
K1[K1.isnull().any(axis=1)]


# In[5]:


#create new variables that calculate the total of proerty crime and violent crime taking population into account
K1["Prisoner_proportion"] = K1["prisoner_count"]/K1['state_population']
K1["Violent_crime_proportion"] = K1["violent_crime_total"]/K1['state_population']
K1["Property_crime_proportion"] = K1["property_crime_total"]/K1['state_population']
K1.describe()


# In[48]:


#calculate & remove outliers using the InterQuartile range method
K2 = K1[K1.includes_jails == False]
Kpc = K2[['year','State','Violent_crime_proportion','Property_crime_proportion','Prisoner_proportion','state_population' ]].copy()
Q1 = Kpc.quantile(0.10)
Q3 = Kpc.quantile(0.90)
IQR = Q3 - Q1
Kpc= Kpc[~((Kpc < (Q1 - 1.5 * IQR)) |(Kpc > (Q3 + 1.5 * IQR))).any(axis=1)]


# ### Looking at the distribution of the data

# In[49]:


#Violent Crime distribution histogram
Kpc = Kpc.sort_values(by=['state_population'])
plt.hist(Kpc["Violent_crime_proportion"])
plt.xlabel("Violent Crime")
plt.ylabel("Frequency")
plt.title("Histogram of Violent Crime")
plt.grid(b = True, axis = "y");


# In[9]:


#Property Crime distribution histogram
plt.hist(Kpc["Property_crime_proportion"])
plt.xlabel("Property Crime")
plt.ylabel("Frequency")
plt.title("Histogram of Property Crime")
plt.grid(b = True, axis = "y");


# In[10]:


#Prisoner population proportion distribution histogram
plt.hist(Kpc["Prisoner_proportion"])
plt.xlabel("Prisoner proportion of Population")
plt.ylabel("Frequency")
plt.title("Histogram of Prisoner Proportion")
plt.grid(b = True, axis = "y");


# After looking at the distributions of the three variables, they all seem like they don’t need any transformations as the variance is fairly consistent. 

# In[11]:


#
fig = px.scatter_matrix(Kpc, 
                        dimensions=["State", "Prisoner_proportion", "Violent_crime_proportion", "Property_crime_proportion", "year"],
                        title="Scatter matrix of Crime data set",
                        labels={col:col.replace('_', ' ') for col in Kpc.columns})
fig.update_layout(width=900, height=970,showlegend=False)
fig.update_layout({"yaxis"+str(i+1): dict(showticklabels=False) for i in range(7)})
fig.update_layout({"xaxis"+str(i+1): dict(showticklabels=False) for i in range(7)})
fig.update_layout({"yaxis"+str(i+1): dict(title_font_size= 12) for i in range(7)})
fig.update_layout({"xaxis"+str(i+1): dict(title_font_size= 12) for i in range(7)})
fig.show()


# I noticed that there were values that were abnormally high in the year column so I pulled out any data that included jails in the count to see how if effected totals compared to the rest of the data. 

# In[43]:


fig = px.line(K1, x="year", y="Prisoner_proportion",facet_col="includes_jails",
             color = "State",hover_name="State",
             labels={col:col.replace('_', ' ')for col in Kpc.columns})
fig.update_layout(showlegend=True, 
                    title = "Which states included jails in their data")
# set color of all traces to lightgrey
fig.update_traces({"line":{"color":"lightgrey"}})
# color UTAH line to blue
fig.update_traces(patch={"line":{"color":"blue", "width":5}}, 
                  selector={"legendgroup":"UTAH"})
fig.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1]))

fig.show()


# Since there weren't many observations including jails and those that do include jail counts did seem to be different enough that I removed that data for the rest of the analysis. I then narrowed my focus on the two crime variables to see how they correlated with each other. 

# In[13]:


fig = px.scatter(Kpc, y="Violent_crime_proportion", x="Property_crime_proportion",
                 hover_name="State", hover_data=["Prisoner_proportion"], color = "State",
                 marginal_x="rug", marginal_y="box",
                 title = "Property Crime and Violent crime Frequency",
                labels={col:col.replace('_', ' ') for col in Kpc.columns})
fig.update_layout(showlegend =False)

fig.show()


# In[14]:


fig = px.scatter(Kpc, y="Violent_crime_proportion", x="Property_crime_proportion", size="Prisoner_proportion", 
                 color="year",hover_name="State", size_max=15,
            labels={col:col.replace('_', ' ') for col in Kpc.columns},
            title = "Property Crime and Violent crime Frequency over time")
fig.show()


# In[15]:



fig = px.parallel_coordinates(Kpc, color="year", labels={"State": "State",
                  "Prisoner_proportion": "Prisoner Proportion", "Violent_crime_proportion": "Violent Crime",
                  "Property_crime_proportion": "Property Crime"},
                   color_continuous_scale=px.colors.diverging.Tealrose, color_continuous_midpoint=2010)
fig.show()


# In[16]:


fig = make_subplots(rows=3, cols=1)
fig.append_trace(go.Scatter(
    x=[3, 4, 5],
    y=[1000, 1100, 1200],
), row=1, col=1)

UT1 = px.scatter(Kpc.query("State==('UTAH','ARIZONA','NEVADA','NEW MEXICO', 'IDAHO','COLORADO')"), x="year", y="Prisoner_proportion",
               hover_name="State", hover_data=["year"], color = "State",trendline='ols',
            labels={col:col.replace('_', ' ') for col in Kpc.columns},
            title = "Prisoner proportion per year for Utah and neighbors")
UT1.update_layout(width=700, height=500)
UT1.show()


# You can see that the prisoner proportion has stayed the same for the most part for Utah and its neighboring states.
# You would then expect crime rates have stayed the same as well. 

# In[17]:


UT2 = px.scatter(Kpc.query("State==('UTAH','ARIZONA','NEVADA','NEW MEXICO', 'IDAHO','COLORADO')"), x="year", y="Violent_crime_proportion",
               hover_name="State", hover_data=["year"], color = "State",trendline='ols',
            labels={col:col.replace('_', ' ') for col in Kpc.columns},
            title = "Violent crime per year for Utah and neighbors")
UT2.update_layout(width=700, height=500)
UT2.show()


# In[18]:


UT3 = px.scatter(Kpc.query("State==('UTAH','ARIZONA','NEVADA','NEW MEXICO', 'IDAHO','COLORADO')"), x="year", y="Property_crime_proportion",
               hover_name="State", hover_data=["year"], color = "State",trendline='ols',
            labels={col:col.replace('_', ' ') for col in Kpc.columns},
            title = "Property crime per year for Utah and neighbors")
UT3.update_layout(width=700, height=500)
UT3.show()


# We can see from these graphs that the rates for major crimes have been clearly decreasing while our prison 
# population remains the same. 

# In[19]:


path = "/Users/k12/Downloads/"
file1 = "State_Recidivism_Rates_All_States.csv"
F1 = pd.read_csv(path + file1, encoding = 'unicode_escape')
F1.head()


# In[20]:


#Rename columns
F1.columns = ["Organization","Year","Target Pop","Pop Description", "Program type",
              "Recidivism detail", "RecidivismRate", "More info", "State"]
F1.dtypes


# In[21]:


#Get rid of columns that aren't useful for visualization
del F1["Organization"]
del F1["Pop Description"]
del F1["More info"]


# In[22]:


F1[F1.isnull().any(axis=1)]


# In[23]:


F1['Program type'][F1['Program type'].isnull()] = "None"
F1['Year'].fillna((2006), inplace=True)
F1['Year']=F1['Year'].astype(float)
F1[F1.isnull().any(axis=1)]


# In[24]:


#Pull first rate from Recidivsim Rate column into new 'Rate' column
F1["Rate"] = F1["RecidivismRate"].str.extract("(\d*\.?\d+)")
F1.head()
F1["Rate"].describe()


# In[25]:


#find any other Null values
F1 = F1.dropna()
F1['Rate']=F1['Rate'].astype(float)
F1 = F1[F1["Rate"] < 100]
F1[F1.isnull().any(axis=1)]


# In[26]:



#Fill in 2 missing rate values with mean
F1['Rate']=F1['Rate'].astype(float64)
Rmean = F1['Rate'].mean()
F1['Rate'][F1['Rate'] > 100] = Rmean
F1['Rate'].fillna((Rmean), inplace=True)
F1['Rate'].describe()


# In[27]:


a = F1['Target Pop'].unique()
print(a)


# In[28]:


F1.loc[F1['Target Pop'].str.contains('Juv', case=False), 'Target Pop'] = 'Juvenile'
F1.loc[F1['Target Pop'].str.contains('drug', case=False), 'Target Pop'] = 'Drug Felon'
F1.loc[F1['Target Pop'].str.contains('sex', case=False), 'Target Pop'] = 'Sex offender'
F1.loc[F1['Target Pop'].str.contains('adult', case=False), 'Target Pop'] = 'Felon'
F1.loc[F1['Target Pop'].str.contains('Felon', case=False), 'Target Pop'] = 'Felon'
F1.loc[F1['Target Pop'].str.contains('offend', case=False), 'Target Pop'] = 'Felon'
F1.loc[F1['Target Pop'].str.contains('prison', case=False), 'Target Pop'] = 'Felon'
F1.loc[F1['Target Pop'].str.contains('Prob', case=False), 'Target Pop'] = 'Felon'


# In[29]:


F1.loc[F1['Program type'].str.contains('sex', case=False), 'Program type'] = 'Sex Offender'
F1.loc[F1['Program type'].str.contains('drug', case=False), 'Program type'] = 'Drug Treatment'
F1.loc[F1['Program type'].str.contains('educ', case=False), 'Program type'] = 'Training'
F1.loc[F1['Program type'].str.contains('sex', case=False), 'Program type'] = 'Sex Offender'
F1.loc[F1['Program type'].str.contains('anger', case=False), 'Program type'] = 'Violence'
F1.loc[F1['Program type'].str.contains('violen', case=False), 'Program type'] = 'Violence'
F1.loc[F1['Program type'].str.contains('train', case=False), 'Program type'] = 'Training'
F1.loc[F1['Program type'].str.contains('Juv', case=False), 'Program type'] = 'Juvenile'
F1.loc[F1['Program type'].str.contains('cor', case=False), 'Program type'] = 'Training'
F1.loc[F1['Program type'].str.contains('academy', case=False), 'Program type'] = 'Education'
F1.loc[F1['Program type'].str.contains('program', case=False), 'Program type'] = 'General'
F1.loc[F1['Program type'].str.contains('entry', case=False), 'Program type'] = 'General'
F1.loc[F1['Program type'].str.contains('risk', case=False), 'Program type'] = 'General'
F1.loc[F1['Program type'].str.contains('center', case=False), 'Program type'] = 'General'
F1.loc[F1['Program type'].str.contains('GPS', case=False), 'Program type'] = 'General'
F1.loc[F1['Program type'].str.contains('sent', case=False), 'Program type'] = 'General'


# In[30]:


df = F1['Program type'].value_counts()
df


# In[31]:


F1['In a Program'] = np.where(F1['Program type'] == 'None', 'No Program','In a Program')
F1['In a Program'].value_counts()
F1.head()


# In[32]:


fig = px.box(F1, x="Year", y="Rate", color="In a Program")
#fig.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1]))
#fig.update_traces(marker=dict(color="blue"), name="No", row=1, col=1)
#fig.update_traces(marker=dict(color = "green"),
 #           name="Yes", row=1, col=2)
fig.show()


# ### Footnotes

#  1. <span id="fn1"> Collier, L. (2014, October). Incarceration nation. Monitor on Psychology, 45(9). http://www.apa.org/monitor/2014/10/incarceration![image.png](attachment:image.png)</span>

# In[ ]:




